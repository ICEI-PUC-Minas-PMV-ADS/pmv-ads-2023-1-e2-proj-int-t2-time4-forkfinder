// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fork_finder.Data;

namespace fork_finder.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507215850_M002")]
    partial class M002
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RestauranteRestauranteFoto", b =>
                {
                    b.Property<Guid>("RestauranteFotosRestauranteFotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantesRestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RestauranteFotosRestauranteFotoId", "RestaurantesRestauranteId");

                    b.HasIndex("RestaurantesRestauranteId");

                    b.ToTable("RestauranteRestauranteFoto");
                });

            modelBuilder.Entity("fork_finder.Models.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Papel")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefone")
                        .HasColumnType("int");

                    b.HasKey("ClienteId");

                    b.HasIndex("RestauranteId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("fork_finder.Models.ClienteAvaliacao", b =>
                {
                    b.Property<Guid>("ClienteAvaliacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("Estrela")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClienteAvaliacaoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("RestauranteId");

                    b.ToTable("ClienteAvaliacoes");
                });

            modelBuilder.Entity("fork_finder.Models.ClienteComentario", b =>
                {
                    b.Property<Guid>("ClienteComentarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConteudoComentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.HasKey("ClienteComentarioId");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClienteComentarios");
                });

            modelBuilder.Entity("fork_finder.Models.ClientePerfil", b =>
                {
                    b.Property<Guid>("ClientePerfilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FotoCliente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientePerfilId");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("ClientePerfils");
                });

            modelBuilder.Entity("fork_finder.Models.Endereco", b =>
                {
                    b.Property<Guid>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<Guid>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EnderecoId");

                    b.HasIndex("RestauranteId")
                        .IsUnique();

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("fork_finder.Models.Especialidade", b =>
                {
                    b.Property<Guid>("EspecialidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientePerfilId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagemUpload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeEspecialidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EspecialidadeId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ClientePerfilId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("fork_finder.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Imagem")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NomeProduto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProdutoCategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoCategoriaId");

                    b.HasIndex("RestauranteId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("fork_finder.Models.ProdutoCategoria", b =>
                {
                    b.Property<Guid>("ProdutoCategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProdutoCategoriaId");

                    b.ToTable("ProdutoCategorias");
                });

            modelBuilder.Entity("fork_finder.Models.Restaurante", b =>
                {
                    b.Property<Guid>("RestauranteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClienteComentarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescricaoRestaurante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EspecialidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FotoPerfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Papel")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProdutoCategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefone")
                        .HasColumnType("int");

                    b.HasKey("RestauranteId");

                    b.HasIndex("ClienteComentarioId");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("ProdutoCategoriaId");

                    b.ToTable("Restaurantes");
                });

            modelBuilder.Entity("fork_finder.Models.RestauranteFoto", b =>
                {
                    b.Property<Guid>("RestauranteFotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FotosRestaurante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestauranteFotoId");

                    b.ToTable("RestauranteFotos");
                });

            modelBuilder.Entity("fork_finder.Models.RestauranteFuncionamento", b =>
                {
                    b.Property<Guid>("RestauranteFuncionamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DiaDaSemana")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HorarioFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HorarioInicio")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RestauranteFuncionamentoId");

                    b.HasIndex("RestauranteId")
                        .IsUnique();

                    b.ToTable("Funcionamentos");
                });

            modelBuilder.Entity("fork_finder.Models.RestauranteMesa", b =>
                {
                    b.Property<Guid>("RestauranteMesaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantidadeMesa")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestauranteReservaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TamanhoMesa")
                        .HasColumnType("int");

                    b.HasKey("RestauranteMesaId");

                    b.HasIndex("RestauranteId");

                    b.HasIndex("RestauranteReservaId");

                    b.ToTable("RestauranteMesas");
                });

            modelBuilder.Entity("fork_finder.Models.RestauranteReserva", b =>
                {
                    b.Property<Guid>("RestauranteReservaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataHoraCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataHoraReserva")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Situacao")
                        .HasColumnType("bit");

                    b.HasKey("RestauranteReservaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("RestauranteId");

                    b.ToTable("RestauranteReservas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestauranteRestauranteFoto", b =>
                {
                    b.HasOne("fork_finder.Models.RestauranteFoto", null)
                        .WithMany()
                        .HasForeignKey("RestauranteFotosRestauranteFotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fork_finder.Models.Restaurante", null)
                        .WithMany()
                        .HasForeignKey("RestaurantesRestauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fork_finder.Models.Cliente", b =>
                {
                    b.HasOne("fork_finder.Models.Restaurante", null)
                        .WithMany("Clientes")
                        .HasForeignKey("RestauranteId");
                });

            modelBuilder.Entity("fork_finder.Models.ClienteAvaliacao", b =>
                {
                    b.HasOne("fork_finder.Models.Cliente", "Cliente")
                        .WithMany("ClienteAvaliacoes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithMany("ClienteAvaliacoes")
                        .HasForeignKey("RestauranteId");

                    b.Navigation("Cliente");

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.ClienteComentario", b =>
                {
                    b.HasOne("fork_finder.Models.Cliente", "Cliente")
                        .WithMany("ClienteComentarios")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("fork_finder.Models.ClientePerfil", b =>
                {
                    b.HasOne("fork_finder.Models.Cliente", "Cliente")
                        .WithOne("Perfil")
                        .HasForeignKey("fork_finder.Models.ClientePerfil", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("fork_finder.Models.Endereco", b =>
                {
                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithOne("Endereco")
                        .HasForeignKey("fork_finder.Models.Endereco", "RestauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.Especialidade", b =>
                {
                    b.HasOne("fork_finder.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("fork_finder.Models.ClientePerfil", null)
                        .WithMany("Especialidades")
                        .HasForeignKey("ClientePerfilId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("fork_finder.Models.Produto", b =>
                {
                    b.HasOne("fork_finder.Models.ProdutoCategoria", "ProdutoCategoria")
                        .WithMany("Produtos")
                        .HasForeignKey("ProdutoCategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fork_finder.Models.Restaurante", null)
                        .WithMany("Produtos")
                        .HasForeignKey("RestauranteId");

                    b.Navigation("ProdutoCategoria");
                });

            modelBuilder.Entity("fork_finder.Models.Restaurante", b =>
                {
                    b.HasOne("fork_finder.Models.ClienteComentario", "ClienteComentario")
                        .WithMany("Restaurantes")
                        .HasForeignKey("ClienteComentarioId");

                    b.HasOne("fork_finder.Models.Especialidade", "Especialidade")
                        .WithMany("Restaurantes")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fork_finder.Models.ProdutoCategoria", null)
                        .WithMany("Restaurantes")
                        .HasForeignKey("ProdutoCategoriaId");

                    b.Navigation("ClienteComentario");

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("fork_finder.Models.RestauranteFuncionamento", b =>
                {
                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithOne("Funcionamento")
                        .HasForeignKey("fork_finder.Models.RestauranteFuncionamento", "RestauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.RestauranteMesa", b =>
                {
                    b.HasOne("fork_finder.Models.Restaurante", null)
                        .WithMany("RestauranteMesas")
                        .HasForeignKey("RestauranteId");

                    b.HasOne("fork_finder.Models.RestauranteReserva", "RestauranteReserva")
                        .WithMany("RestauranteMesas")
                        .HasForeignKey("RestauranteReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestauranteReserva");
                });

            modelBuilder.Entity("fork_finder.Models.RestauranteReserva", b =>
                {
                    b.HasOne("fork_finder.Models.Cliente", "Cliente")
                        .WithMany("RestauranteReservas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithMany("RestauranteReservas")
                        .HasForeignKey("RestauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.Cliente", b =>
                {
                    b.Navigation("ClienteAvaliacoes");

                    b.Navigation("ClienteComentarios");

                    b.Navigation("Perfil");

                    b.Navigation("RestauranteReservas");
                });

            modelBuilder.Entity("fork_finder.Models.ClienteComentario", b =>
                {
                    b.Navigation("Restaurantes");
                });

            modelBuilder.Entity("fork_finder.Models.ClientePerfil", b =>
                {
                    b.Navigation("Especialidades");
                });

            modelBuilder.Entity("fork_finder.Models.Especialidade", b =>
                {
                    b.Navigation("Restaurantes");
                });

            modelBuilder.Entity("fork_finder.Models.ProdutoCategoria", b =>
                {
                    b.Navigation("Produtos");

                    b.Navigation("Restaurantes");
                });

            modelBuilder.Entity("fork_finder.Models.Restaurante", b =>
                {
                    b.Navigation("ClienteAvaliacoes");

                    b.Navigation("Clientes");

                    b.Navigation("Endereco");

                    b.Navigation("Funcionamento");

                    b.Navigation("Produtos");

                    b.Navigation("RestauranteMesas");

                    b.Navigation("RestauranteReservas");
                });

            modelBuilder.Entity("fork_finder.Models.RestauranteReserva", b =>
                {
                    b.Navigation("RestauranteMesas");
                });
#pragma warning restore 612, 618
        }
    }
}
