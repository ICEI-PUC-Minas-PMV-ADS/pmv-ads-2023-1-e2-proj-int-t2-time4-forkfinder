// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fork_finder.Data;

namespace fork_finder.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230512145549_NovoDbContext003")]
    partial class NovoDbContext003
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EspecialidadeRestaurante", b =>
                {
                    b.Property<Guid>("EspecialidadesEspecialidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EspecialidadesEspecialidadeId", "RestaurantesId");

                    b.HasIndex("RestaurantesId");

                    b.ToTable("EspecialidadeRestaurante");
                });

            modelBuilder.Entity("fork_finder.Models.Avaliacao", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("Estrela")
                        .HasColumnType("int");

                    b.Property<Guid>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestauranteId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClienteId");

                    b.HasAlternateKey("RestauranteId");

                    b.HasIndex("ClienteId1");

                    b.HasIndex("RestauranteId1");

                    b.ToTable("Avaliacoes");
                });

            modelBuilder.Entity("fork_finder.Models.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestauranteId");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("fork_finder.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Papel")
                        .HasColumnType("int");

                    b.Property<Guid?>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestauranteId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("fork_finder.Models.Comentario", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConteudoComentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestauranteId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClienteId");

                    b.HasAlternateKey("RestauranteId");

                    b.HasIndex("ClienteId1");

                    b.HasIndex("RestauranteId1");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("fork_finder.Models.Endereco", b =>
                {
                    b.Property<Guid>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("RestauranteId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("fork_finder.Models.Especialidade", b =>
                {
                    b.Property<Guid>("EspecialidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagemUpload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeEspecialidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PerfilClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EspecialidadeId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PerfilClienteId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("fork_finder.Models.Foto", b =>
                {
                    b.Property<Guid>("RestauranteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FotosRestaurante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RestauranteId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RestauranteId");

                    b.HasIndex("RestauranteId1");

                    b.ToTable("Fotos");
                });

            modelBuilder.Entity("fork_finder.Models.Funcionamento", b =>
                {
                    b.Property<Guid>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DiaDaSemana")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HorarioFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HorarioInicio")
                        .HasColumnType("datetime2");

                    b.HasKey("RestauranteId");

                    b.ToTable("Funcionamentos");
                });

            modelBuilder.Entity("fork_finder.Models.Mesa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantidadeMesa")
                        .HasColumnType("int");

                    b.Property<Guid>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TamanhoMesa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestauranteId");

                    b.ToTable("Mesas");
                });

            modelBuilder.Entity("fork_finder.Models.Perfil", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FotoCliente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteId");

                    b.ToTable("Perfils");
                });

            modelBuilder.Entity("fork_finder.Models.Produto", b =>
                {
                    b.Property<Guid>("ProdutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Imagem")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NomeProduto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProdutoId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("fork_finder.Models.Reserva", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataHoraCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataHoraReserva")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MesaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RestauranteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Situacao")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MesaId");

                    b.HasIndex("RestauranteId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("fork_finder.Models.Restaurante", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescricaoRestaurante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotoPerfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Papel")
                        .HasColumnType("int");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Restaurantes");
                });

            modelBuilder.Entity("EspecialidadeRestaurante", b =>
                {
                    b.HasOne("fork_finder.Models.Especialidade", null)
                        .WithMany()
                        .HasForeignKey("EspecialidadesEspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fork_finder.Models.Restaurante", null)
                        .WithMany()
                        .HasForeignKey("RestaurantesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fork_finder.Models.Avaliacao", b =>
                {
                    b.HasOne("fork_finder.Models.Cliente", "Cliente")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ClienteId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("RestauranteId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.Categoria", b =>
                {
                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithMany("Categorias")
                        .HasForeignKey("RestauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.Cliente", b =>
                {
                    b.HasOne("fork_finder.Models.Restaurante", null)
                        .WithMany("Clientes")
                        .HasForeignKey("RestauranteId");
                });

            modelBuilder.Entity("fork_finder.Models.Comentario", b =>
                {
                    b.HasOne("fork_finder.Models.Cliente", "Cliente")
                        .WithMany("Comentarios")
                        .HasForeignKey("ClienteId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithMany("Comentarios")
                        .HasForeignKey("RestauranteId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.Endereco", b =>
                {
                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithOne("Endereco")
                        .HasForeignKey("fork_finder.Models.Endereco", "RestauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.Especialidade", b =>
                {
                    b.HasOne("fork_finder.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("fork_finder.Models.Perfil", null)
                        .WithMany("Especialidades")
                        .HasForeignKey("PerfilClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("fork_finder.Models.Foto", b =>
                {
                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithMany("Fotos")
                        .HasForeignKey("RestauranteId1");

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.Funcionamento", b =>
                {
                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithOne("Funcionamento")
                        .HasForeignKey("fork_finder.Models.Funcionamento", "RestauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.Mesa", b =>
                {
                    b.HasOne("fork_finder.Models.Restaurante", "Restaurante")
                        .WithMany("Mesas")
                        .HasForeignKey("RestauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("fork_finder.Models.Perfil", b =>
                {
                    b.HasOne("fork_finder.Models.Cliente", "Cliente")
                        .WithOne("Perfil")
                        .HasForeignKey("fork_finder.Models.Perfil", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("fork_finder.Models.Produto", b =>
                {
                    b.HasOne("fork_finder.Models.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("fork_finder.Models.Reserva", b =>
                {
                    b.HasOne("fork_finder.Models.Cliente", "Cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fork_finder.Models.Mesa", "Mesa")
                        .WithMany("Reservas")
                        .HasForeignKey("MesaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fork_finder.Models.Restaurante", null)
                        .WithMany("Reservas")
                        .HasForeignKey("RestauranteId");

                    b.Navigation("Cliente");

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("fork_finder.Models.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("fork_finder.Models.Cliente", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Comentarios");

                    b.Navigation("Perfil");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("fork_finder.Models.Mesa", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("fork_finder.Models.Perfil", b =>
                {
                    b.Navigation("Especialidades");
                });

            modelBuilder.Entity("fork_finder.Models.Restaurante", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Categorias");

                    b.Navigation("Clientes");

                    b.Navigation("Comentarios");

                    b.Navigation("Endereco");

                    b.Navigation("Fotos");

                    b.Navigation("Funcionamento");

                    b.Navigation("Mesas");

                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
